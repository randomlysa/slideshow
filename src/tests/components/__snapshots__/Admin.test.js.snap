// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render Admin page correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Admin
    config={
      Object {
        "slideDuration": 6,
        "transitionDuration": 500,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Admin Page
        </h1>,
        <button
          className="btn-logout"
          onClick={[Function]}
        >
          Logout
        </button>,
        <hr
          style={
            Object {
              "marginBottom": "30px",
            }
          }
        />,
        <select
          className="selectActiveFolder"
          name="selectActiveFolder"
          onChange={[Function]}
        >
          <option
            value=""
          >
            Select a slideshow folder to edit
          </option>
        </select>,
        "",
      ],
      "className": "admin",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Admin Page",
        },
        "ref": null,
        "rendered": "Admin Page",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Logout",
          "className": "btn-logout",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Logout",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "style": Object {
            "marginBottom": "30px",
          },
        },
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>,
            Array [],
          ],
          "className": "selectActiveFolder",
          "name": "selectActiveFolder",
          "onChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Select a slideshow folder to edit",
              "value": "",
            },
            "ref": null,
            "rendered": "Select a slideshow folder to edit",
            "type": "option",
          },
        ],
        "type": "select",
      },
      "",
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Admin Page
          </h1>,
          <button
            className="btn-logout"
            onClick={[Function]}
          >
            Logout
          </button>,
          <hr
            style={
              Object {
                "marginBottom": "30px",
              }
            }
          />,
          <select
            className="selectActiveFolder"
            name="selectActiveFolder"
            onChange={[Function]}
          >
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>
          </select>,
          "",
        ],
        "className": "admin",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Admin Page",
          },
          "ref": null,
          "rendered": "Admin Page",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Logout",
            "className": "btn-logout",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Logout",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "style": Object {
              "marginBottom": "30px",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value=""
              >
                Select a slideshow folder to edit
              </option>,
              Array [],
            ],
            "className": "selectActiveFolder",
            "name": "selectActiveFolder",
            "onChange": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select a slideshow folder to edit",
                "value": "",
              },
              "ref": null,
              "rendered": "Select a slideshow folder to edit",
              "type": "option",
            },
          ],
          "type": "select",
        },
        "",
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`should set slideDuration on input change 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Admin
    actions={
      Object {
        "DELETE_FILE_FULFILLED": "DELETE_FILE_FULFILLED",
        "GET_CONFIG_FROM_DATABASE": "GET_CONFIG_FROM_DATABASE",
        "GET_CONFIG_FROM_DATABASE_FULFILLED": "GET_CONFIG_FROM_DATABASE_FULFILLED",
        "GET_SLIDESHOW_SLIDES": "GET_SLIDESHOW_SLIDES",
        "GET_SLIDESHOW_SLIDES_FULFILLED": "GET_SLIDESHOW_SLIDES_FULFILLED",
        "SET_WEATHER_CITY": "SET_WEATHER_CITY",
        "UPDATE_CONFIG": "UPDATE_CONFIG",
        "UPDATE_CONFIG_IN_DATABASE": "UPDATE_CONFIG_IN_DATABASE",
        "UPDATE_CONFIG_IN_DATABASE_FULFILLED": "UPDATE_CONFIG_IN_DATABASE_FULFILLED",
        "UPLOAD_FILE_FULFILLED": "UPLOAD_FILE_FULFILLED",
        "deleteFile": [Function],
        "getConfigFromDatabase": [Function],
        "getFilesInSlideshowDir": [Function],
        "setWeatherCity": [Function],
        "updateAfterDeleteFile": [Function],
        "updateAfterUploadFile": [Function],
        "updateConfig": [Function],
        "updateConfigInDatabase": [Function],
        "uploadFile": [Function],
      }
    }
    config={
      Object {
        "slideDuration": 6,
        "transitionDuration": 500,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Admin Page
        </h1>,
        <button
          className="btn-logout"
          onClick={[Function]}
        >
          Logout
        </button>,
        <hr
          style={
            Object {
              "marginBottom": "30px",
            }
          }
        />,
        <select
          className="selectActiveFolder"
          name="selectActiveFolder"
          onChange={[Function]}
        >
          <option
            value=""
          >
            Select a slideshow folder to edit
          </option>
        </select>,
        <div
          className="adminSection"
        >
          <form
            onSubmit={[Function]}
          >
            <Connect(AdminWeather) />
            Slide duration (seconds):
            <input
              id="slideDuration"
              onChange={[Function]}
              placeholder="Number (seconds)"
              type="number"
              value=""
            />
            <br />
            Transition duration (ms):
            <input
              id="transitionDuration"
              onChange={[Function]}
              placeholder="Number (milliseconds)"
              type="number"
              value=""
            />
             (1000ms = 1s)
            <br />
            <input
              type="submit"
              value="Save"
            />
          </form>
          <div
            className="adminFlexbox"
          >
            <div
              className="adminFlexbox--Slideshow"
            >
              <Connect(AdminSlideshow)
                activeFolder="bb1"
                callUpdateConfigInDatabase={[Function]}
                deleteFile={[Function]}
                getConfigFromDatabase={[Function]}
                getFilesInSlideshowDir={[Function]}
                updateSlideOrder={[Function]}
              />
            </div>
            <div
              className="adminFlexbox--Dropzone"
            >
              <UploadFiles
                activeFolder="bb1"
                getFilesInSlideshowDir={[Function]}
                uploadFile={[Function]}
                uploadStatus={true}
              />
            </div>
          </div>
        </div>,
      ],
      "className": "admin",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Admin Page",
        },
        "ref": null,
        "rendered": "Admin Page",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Logout",
          "className": "btn-logout",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Logout",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "style": Object {
            "marginBottom": "30px",
          },
        },
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>,
            Array [],
          ],
          "className": "selectActiveFolder",
          "name": "selectActiveFolder",
          "onChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Select a slideshow folder to edit",
              "value": "",
            },
            "ref": null,
            "rendered": "Select a slideshow folder to edit",
            "type": "option",
          },
        ],
        "type": "select",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value=""
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value=""
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>,
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>,
          ],
          "className": "adminSection",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Connect(AdminWeather) />,
                "Slide duration (seconds):",
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value=""
                />,
                <br />,
                "Transition duration (ms):",
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value=""
                />,
                " (1000ms = 1s)",
                <br />,
                <input
                  type="submit"
                  value="Save"
                />,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "Slide duration (seconds):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "slideDuration",
                  "onChange": [Function],
                  "placeholder": "Number (seconds)",
                  "type": "number",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              "Transition duration (ms):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "transitionDuration",
                  "onChange": [Function],
                  "placeholder": "Number (milliseconds)",
                  "type": "number",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              " (1000ms = 1s)",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Save",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>,
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>,
              ],
              "className": "adminFlexbox",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />,
                  "className": "adminFlexbox--Slideshow",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "callUpdateConfigInDatabase": [Function],
                    "deleteFile": [Function],
                    "getConfigFromDatabase": [Function],
                    "getFilesInSlideshowDir": [Function],
                    "updateSlideOrder": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />,
                  "className": "adminFlexbox--Dropzone",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "getFilesInSlideshowDir": [Function],
                    "uploadFile": [Function],
                    "uploadStatus": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Admin Page
          </h1>,
          <button
            className="btn-logout"
            onClick={[Function]}
          >
            Logout
          </button>,
          <hr
            style={
              Object {
                "marginBottom": "30px",
              }
            }
          />,
          <select
            className="selectActiveFolder"
            name="selectActiveFolder"
            onChange={[Function]}
          >
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>
          </select>,
          <div
            className="adminSection"
          >
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value=""
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value=""
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>
          </div>,
        ],
        "className": "admin",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Admin Page",
          },
          "ref": null,
          "rendered": "Admin Page",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Logout",
            "className": "btn-logout",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Logout",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "style": Object {
              "marginBottom": "30px",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value=""
              >
                Select a slideshow folder to edit
              </option>,
              Array [],
            ],
            "className": "selectActiveFolder",
            "name": "selectActiveFolder",
            "onChange": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select a slideshow folder to edit",
                "value": "",
              },
              "ref": null,
              "rendered": "Select a slideshow folder to edit",
              "type": "option",
            },
          ],
          "type": "select",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                onSubmit={[Function]}
              >
                <Connect(AdminWeather) />
                Slide duration (seconds):
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value=""
                />
                <br />
                Transition duration (ms):
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value=""
                />
                 (1000ms = 1s)
                <br />
                <input
                  type="submit"
                  value="Save"
                />
              </form>,
              <div
                className="adminFlexbox"
              >
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>
              </div>,
            ],
            "className": "adminSection",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Connect(AdminWeather) />,
                  "Slide duration (seconds):",
                  <input
                    id="slideDuration"
                    onChange={[Function]}
                    placeholder="Number (seconds)"
                    type="number"
                    value=""
                  />,
                  <br />,
                  "Transition duration (ms):",
                  <input
                    id="transitionDuration"
                    onChange={[Function]}
                    placeholder="Number (milliseconds)"
                    type="number"
                    value=""
                  />,
                  " (1000ms = 1s)",
                  <br />,
                  <input
                    type="submit"
                    value="Save"
                  />,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "Slide duration (seconds):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "slideDuration",
                    "onChange": [Function],
                    "placeholder": "Number (seconds)",
                    "type": "number",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                "Transition duration (ms):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "transitionDuration",
                    "onChange": [Function],
                    "placeholder": "Number (milliseconds)",
                    "type": "number",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                " (1000ms = 1s)",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "type": "submit",
                    "value": "Save",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="adminFlexbox--Slideshow"
                  >
                    <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />
                  </div>,
                  <div
                    className="adminFlexbox--Dropzone"
                  >
                    <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />
                  </div>,
                ],
                "className": "adminFlexbox",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />,
                    "className": "adminFlexbox--Slideshow",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "callUpdateConfigInDatabase": [Function],
                      "deleteFile": [Function],
                      "getConfigFromDatabase": [Function],
                      "getFilesInSlideshowDir": [Function],
                      "updateSlideOrder": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />,
                    "className": "adminFlexbox--Dropzone",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "getFilesInSlideshowDir": [Function],
                      "uploadFile": [Function],
                      "uploadStatus": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`should set slideDuration on input change 2`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Admin
    actions={
      Object {
        "DELETE_FILE_FULFILLED": "DELETE_FILE_FULFILLED",
        "GET_CONFIG_FROM_DATABASE": "GET_CONFIG_FROM_DATABASE",
        "GET_CONFIG_FROM_DATABASE_FULFILLED": "GET_CONFIG_FROM_DATABASE_FULFILLED",
        "GET_SLIDESHOW_SLIDES": "GET_SLIDESHOW_SLIDES",
        "GET_SLIDESHOW_SLIDES_FULFILLED": "GET_SLIDESHOW_SLIDES_FULFILLED",
        "SET_WEATHER_CITY": "SET_WEATHER_CITY",
        "UPDATE_CONFIG": "UPDATE_CONFIG",
        "UPDATE_CONFIG_IN_DATABASE": "UPDATE_CONFIG_IN_DATABASE",
        "UPDATE_CONFIG_IN_DATABASE_FULFILLED": "UPDATE_CONFIG_IN_DATABASE_FULFILLED",
        "UPLOAD_FILE_FULFILLED": "UPLOAD_FILE_FULFILLED",
        "deleteFile": [Function],
        "getConfigFromDatabase": [Function],
        "getFilesInSlideshowDir": [Function],
        "setWeatherCity": [Function],
        "updateAfterDeleteFile": [Function],
        "updateAfterUploadFile": [Function],
        "updateConfig": [Function],
        "updateConfigInDatabase": [Function],
        "uploadFile": [Function],
      }
    }
    config={
      Object {
        "slideDuration": 6,
        "transitionDuration": 500,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Admin Page
        </h1>,
        <button
          className="btn-logout"
          onClick={[Function]}
        >
          Logout
        </button>,
        <hr
          style={
            Object {
              "marginBottom": "30px",
            }
          }
        />,
        <select
          className="selectActiveFolder"
          name="selectActiveFolder"
          onChange={[Function]}
        >
          <option
            value=""
          >
            Select a slideshow folder to edit
          </option>
        </select>,
        <div
          className="adminSection"
        >
          <form
            onSubmit={[Function]}
          >
            <Connect(AdminWeather) />
            Slide duration (seconds):
            <input
              id="slideDuration"
              onChange={[Function]}
              placeholder="Number (seconds)"
              type="number"
              value={15}
            />
            <br />
            Transition duration (ms):
            <input
              id="transitionDuration"
              onChange={[Function]}
              placeholder="Number (milliseconds)"
              type="number"
              value=""
            />
             (1000ms = 1s)
            <br />
            <input
              type="submit"
              value="Save"
            />
          </form>
          <div
            className="adminFlexbox"
          >
            <div
              className="adminFlexbox--Slideshow"
            >
              <Connect(AdminSlideshow)
                activeFolder="bb1"
                callUpdateConfigInDatabase={[Function]}
                deleteFile={[Function]}
                getConfigFromDatabase={[Function]}
                getFilesInSlideshowDir={[Function]}
                updateSlideOrder={[Function]}
              />
            </div>
            <div
              className="adminFlexbox--Dropzone"
            >
              <UploadFiles
                activeFolder="bb1"
                getFilesInSlideshowDir={[Function]}
                uploadFile={[Function]}
                uploadStatus={true}
              />
            </div>
          </div>
        </div>,
      ],
      "className": "admin",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Admin Page",
        },
        "ref": null,
        "rendered": "Admin Page",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Logout",
          "className": "btn-logout",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Logout",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "style": Object {
            "marginBottom": "30px",
          },
        },
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>,
            Array [],
          ],
          "className": "selectActiveFolder",
          "name": "selectActiveFolder",
          "onChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Select a slideshow folder to edit",
              "value": "",
            },
            "ref": null,
            "rendered": "Select a slideshow folder to edit",
            "type": "option",
          },
        ],
        "type": "select",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value={15}
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value=""
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>,
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>,
          ],
          "className": "adminSection",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Connect(AdminWeather) />,
                "Slide duration (seconds):",
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value={15}
                />,
                <br />,
                "Transition duration (ms):",
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value=""
                />,
                " (1000ms = 1s)",
                <br />,
                <input
                  type="submit"
                  value="Save"
                />,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "Slide duration (seconds):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "slideDuration",
                  "onChange": [Function],
                  "placeholder": "Number (seconds)",
                  "type": "number",
                  "value": 15,
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              "Transition duration (ms):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "transitionDuration",
                  "onChange": [Function],
                  "placeholder": "Number (milliseconds)",
                  "type": "number",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              " (1000ms = 1s)",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Save",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>,
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>,
              ],
              "className": "adminFlexbox",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />,
                  "className": "adminFlexbox--Slideshow",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "callUpdateConfigInDatabase": [Function],
                    "deleteFile": [Function],
                    "getConfigFromDatabase": [Function],
                    "getFilesInSlideshowDir": [Function],
                    "updateSlideOrder": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />,
                  "className": "adminFlexbox--Dropzone",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "getFilesInSlideshowDir": [Function],
                    "uploadFile": [Function],
                    "uploadStatus": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Admin Page
          </h1>,
          <button
            className="btn-logout"
            onClick={[Function]}
          >
            Logout
          </button>,
          <hr
            style={
              Object {
                "marginBottom": "30px",
              }
            }
          />,
          <select
            className="selectActiveFolder"
            name="selectActiveFolder"
            onChange={[Function]}
          >
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>
          </select>,
          <div
            className="adminSection"
          >
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value={15}
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value=""
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>
          </div>,
        ],
        "className": "admin",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Admin Page",
          },
          "ref": null,
          "rendered": "Admin Page",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Logout",
            "className": "btn-logout",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Logout",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "style": Object {
              "marginBottom": "30px",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value=""
              >
                Select a slideshow folder to edit
              </option>,
              Array [],
            ],
            "className": "selectActiveFolder",
            "name": "selectActiveFolder",
            "onChange": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select a slideshow folder to edit",
                "value": "",
              },
              "ref": null,
              "rendered": "Select a slideshow folder to edit",
              "type": "option",
            },
          ],
          "type": "select",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                onSubmit={[Function]}
              >
                <Connect(AdminWeather) />
                Slide duration (seconds):
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value={15}
                />
                <br />
                Transition duration (ms):
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value=""
                />
                 (1000ms = 1s)
                <br />
                <input
                  type="submit"
                  value="Save"
                />
              </form>,
              <div
                className="adminFlexbox"
              >
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>
              </div>,
            ],
            "className": "adminSection",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Connect(AdminWeather) />,
                  "Slide duration (seconds):",
                  <input
                    id="slideDuration"
                    onChange={[Function]}
                    placeholder="Number (seconds)"
                    type="number"
                    value={15}
                  />,
                  <br />,
                  "Transition duration (ms):",
                  <input
                    id="transitionDuration"
                    onChange={[Function]}
                    placeholder="Number (milliseconds)"
                    type="number"
                    value=""
                  />,
                  " (1000ms = 1s)",
                  <br />,
                  <input
                    type="submit"
                    value="Save"
                  />,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "Slide duration (seconds):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "slideDuration",
                    "onChange": [Function],
                    "placeholder": "Number (seconds)",
                    "type": "number",
                    "value": 15,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                "Transition duration (ms):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "transitionDuration",
                    "onChange": [Function],
                    "placeholder": "Number (milliseconds)",
                    "type": "number",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                " (1000ms = 1s)",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "type": "submit",
                    "value": "Save",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="adminFlexbox--Slideshow"
                  >
                    <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />
                  </div>,
                  <div
                    className="adminFlexbox--Dropzone"
                  >
                    <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />
                  </div>,
                ],
                "className": "adminFlexbox",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />,
                    "className": "adminFlexbox--Slideshow",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "callUpdateConfigInDatabase": [Function],
                      "deleteFile": [Function],
                      "getConfigFromDatabase": [Function],
                      "getFilesInSlideshowDir": [Function],
                      "updateSlideOrder": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />,
                    "className": "adminFlexbox--Dropzone",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "getFilesInSlideshowDir": [Function],
                      "uploadFile": [Function],
                      "uploadStatus": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`should set transitionDuration on input change 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Admin
    actions={
      Object {
        "DELETE_FILE_FULFILLED": "DELETE_FILE_FULFILLED",
        "GET_CONFIG_FROM_DATABASE": "GET_CONFIG_FROM_DATABASE",
        "GET_CONFIG_FROM_DATABASE_FULFILLED": "GET_CONFIG_FROM_DATABASE_FULFILLED",
        "GET_SLIDESHOW_SLIDES": "GET_SLIDESHOW_SLIDES",
        "GET_SLIDESHOW_SLIDES_FULFILLED": "GET_SLIDESHOW_SLIDES_FULFILLED",
        "SET_WEATHER_CITY": "SET_WEATHER_CITY",
        "UPDATE_CONFIG": "UPDATE_CONFIG",
        "UPDATE_CONFIG_IN_DATABASE": "UPDATE_CONFIG_IN_DATABASE",
        "UPDATE_CONFIG_IN_DATABASE_FULFILLED": "UPDATE_CONFIG_IN_DATABASE_FULFILLED",
        "UPLOAD_FILE_FULFILLED": "UPLOAD_FILE_FULFILLED",
        "deleteFile": [Function],
        "getConfigFromDatabase": [Function],
        "getFilesInSlideshowDir": [Function],
        "setWeatherCity": [Function],
        "updateAfterDeleteFile": [Function],
        "updateAfterUploadFile": [Function],
        "updateConfig": [Function],
        "updateConfigInDatabase": [Function],
        "uploadFile": [Function],
      }
    }
    config={
      Object {
        "slideDuration": 6,
        "transitionDuration": 500,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Admin Page
        </h1>,
        <button
          className="btn-logout"
          onClick={[Function]}
        >
          Logout
        </button>,
        <hr
          style={
            Object {
              "marginBottom": "30px",
            }
          }
        />,
        <select
          className="selectActiveFolder"
          name="selectActiveFolder"
          onChange={[Function]}
        >
          <option
            value=""
          >
            Select a slideshow folder to edit
          </option>
        </select>,
        <div
          className="adminSection"
        >
          <form
            onSubmit={[Function]}
          >
            <Connect(AdminWeather) />
            Slide duration (seconds):
            <input
              id="slideDuration"
              onChange={[Function]}
              placeholder="Number (seconds)"
              type="number"
              value=""
            />
            <br />
            Transition duration (ms):
            <input
              id="transitionDuration"
              onChange={[Function]}
              placeholder="Number (milliseconds)"
              type="number"
              value=""
            />
             (1000ms = 1s)
            <br />
            <input
              type="submit"
              value="Save"
            />
          </form>
          <div
            className="adminFlexbox"
          >
            <div
              className="adminFlexbox--Slideshow"
            >
              <Connect(AdminSlideshow)
                activeFolder="bb1"
                callUpdateConfigInDatabase={[Function]}
                deleteFile={[Function]}
                getConfigFromDatabase={[Function]}
                getFilesInSlideshowDir={[Function]}
                updateSlideOrder={[Function]}
              />
            </div>
            <div
              className="adminFlexbox--Dropzone"
            >
              <UploadFiles
                activeFolder="bb1"
                getFilesInSlideshowDir={[Function]}
                uploadFile={[Function]}
                uploadStatus={true}
              />
            </div>
          </div>
        </div>,
      ],
      "className": "admin",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Admin Page",
        },
        "ref": null,
        "rendered": "Admin Page",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Logout",
          "className": "btn-logout",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Logout",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "style": Object {
            "marginBottom": "30px",
          },
        },
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>,
            Array [],
          ],
          "className": "selectActiveFolder",
          "name": "selectActiveFolder",
          "onChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Select a slideshow folder to edit",
              "value": "",
            },
            "ref": null,
            "rendered": "Select a slideshow folder to edit",
            "type": "option",
          },
        ],
        "type": "select",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value=""
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value=""
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>,
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>,
          ],
          "className": "adminSection",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Connect(AdminWeather) />,
                "Slide duration (seconds):",
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value=""
                />,
                <br />,
                "Transition duration (ms):",
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value=""
                />,
                " (1000ms = 1s)",
                <br />,
                <input
                  type="submit"
                  value="Save"
                />,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "Slide duration (seconds):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "slideDuration",
                  "onChange": [Function],
                  "placeholder": "Number (seconds)",
                  "type": "number",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              "Transition duration (ms):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "transitionDuration",
                  "onChange": [Function],
                  "placeholder": "Number (milliseconds)",
                  "type": "number",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              " (1000ms = 1s)",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Save",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>,
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>,
              ],
              "className": "adminFlexbox",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />,
                  "className": "adminFlexbox--Slideshow",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "callUpdateConfigInDatabase": [Function],
                    "deleteFile": [Function],
                    "getConfigFromDatabase": [Function],
                    "getFilesInSlideshowDir": [Function],
                    "updateSlideOrder": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />,
                  "className": "adminFlexbox--Dropzone",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "getFilesInSlideshowDir": [Function],
                    "uploadFile": [Function],
                    "uploadStatus": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Admin Page
          </h1>,
          <button
            className="btn-logout"
            onClick={[Function]}
          >
            Logout
          </button>,
          <hr
            style={
              Object {
                "marginBottom": "30px",
              }
            }
          />,
          <select
            className="selectActiveFolder"
            name="selectActiveFolder"
            onChange={[Function]}
          >
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>
          </select>,
          <div
            className="adminSection"
          >
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value=""
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value=""
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>
          </div>,
        ],
        "className": "admin",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Admin Page",
          },
          "ref": null,
          "rendered": "Admin Page",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Logout",
            "className": "btn-logout",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Logout",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "style": Object {
              "marginBottom": "30px",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value=""
              >
                Select a slideshow folder to edit
              </option>,
              Array [],
            ],
            "className": "selectActiveFolder",
            "name": "selectActiveFolder",
            "onChange": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select a slideshow folder to edit",
                "value": "",
              },
              "ref": null,
              "rendered": "Select a slideshow folder to edit",
              "type": "option",
            },
          ],
          "type": "select",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                onSubmit={[Function]}
              >
                <Connect(AdminWeather) />
                Slide duration (seconds):
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value=""
                />
                <br />
                Transition duration (ms):
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value=""
                />
                 (1000ms = 1s)
                <br />
                <input
                  type="submit"
                  value="Save"
                />
              </form>,
              <div
                className="adminFlexbox"
              >
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>
              </div>,
            ],
            "className": "adminSection",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Connect(AdminWeather) />,
                  "Slide duration (seconds):",
                  <input
                    id="slideDuration"
                    onChange={[Function]}
                    placeholder="Number (seconds)"
                    type="number"
                    value=""
                  />,
                  <br />,
                  "Transition duration (ms):",
                  <input
                    id="transitionDuration"
                    onChange={[Function]}
                    placeholder="Number (milliseconds)"
                    type="number"
                    value=""
                  />,
                  " (1000ms = 1s)",
                  <br />,
                  <input
                    type="submit"
                    value="Save"
                  />,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "Slide duration (seconds):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "slideDuration",
                    "onChange": [Function],
                    "placeholder": "Number (seconds)",
                    "type": "number",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                "Transition duration (ms):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "transitionDuration",
                    "onChange": [Function],
                    "placeholder": "Number (milliseconds)",
                    "type": "number",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                " (1000ms = 1s)",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "type": "submit",
                    "value": "Save",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="adminFlexbox--Slideshow"
                  >
                    <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />
                  </div>,
                  <div
                    className="adminFlexbox--Dropzone"
                  >
                    <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />
                  </div>,
                ],
                "className": "adminFlexbox",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />,
                    "className": "adminFlexbox--Slideshow",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "callUpdateConfigInDatabase": [Function],
                      "deleteFile": [Function],
                      "getConfigFromDatabase": [Function],
                      "getFilesInSlideshowDir": [Function],
                      "updateSlideOrder": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />,
                    "className": "adminFlexbox--Dropzone",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "getFilesInSlideshowDir": [Function],
                      "uploadFile": [Function],
                      "uploadStatus": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`should set transitionDuration on input change 2`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Admin
    actions={
      Object {
        "DELETE_FILE_FULFILLED": "DELETE_FILE_FULFILLED",
        "GET_CONFIG_FROM_DATABASE": "GET_CONFIG_FROM_DATABASE",
        "GET_CONFIG_FROM_DATABASE_FULFILLED": "GET_CONFIG_FROM_DATABASE_FULFILLED",
        "GET_SLIDESHOW_SLIDES": "GET_SLIDESHOW_SLIDES",
        "GET_SLIDESHOW_SLIDES_FULFILLED": "GET_SLIDESHOW_SLIDES_FULFILLED",
        "SET_WEATHER_CITY": "SET_WEATHER_CITY",
        "UPDATE_CONFIG": "UPDATE_CONFIG",
        "UPDATE_CONFIG_IN_DATABASE": "UPDATE_CONFIG_IN_DATABASE",
        "UPDATE_CONFIG_IN_DATABASE_FULFILLED": "UPDATE_CONFIG_IN_DATABASE_FULFILLED",
        "UPLOAD_FILE_FULFILLED": "UPLOAD_FILE_FULFILLED",
        "deleteFile": [Function],
        "getConfigFromDatabase": [Function],
        "getFilesInSlideshowDir": [Function],
        "setWeatherCity": [Function],
        "updateAfterDeleteFile": [Function],
        "updateAfterUploadFile": [Function],
        "updateConfig": [Function],
        "updateConfigInDatabase": [Function],
        "uploadFile": [Function],
      }
    }
    config={
      Object {
        "slideDuration": 6,
        "transitionDuration": 500,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Admin Page
        </h1>,
        <button
          className="btn-logout"
          onClick={[Function]}
        >
          Logout
        </button>,
        <hr
          style={
            Object {
              "marginBottom": "30px",
            }
          }
        />,
        <select
          className="selectActiveFolder"
          name="selectActiveFolder"
          onChange={[Function]}
        >
          <option
            value=""
          >
            Select a slideshow folder to edit
          </option>
        </select>,
        <div
          className="adminSection"
        >
          <form
            onSubmit={[Function]}
          >
            <Connect(AdminWeather) />
            Slide duration (seconds):
            <input
              id="slideDuration"
              onChange={[Function]}
              placeholder="Number (seconds)"
              type="number"
              value=""
            />
            <br />
            Transition duration (ms):
            <input
              id="transitionDuration"
              onChange={[Function]}
              placeholder="Number (milliseconds)"
              type="number"
              value={750}
            />
             (1000ms = 1s)
            <br />
            <input
              type="submit"
              value="Save"
            />
          </form>
          <div
            className="adminFlexbox"
          >
            <div
              className="adminFlexbox--Slideshow"
            >
              <Connect(AdminSlideshow)
                activeFolder="bb1"
                callUpdateConfigInDatabase={[Function]}
                deleteFile={[Function]}
                getConfigFromDatabase={[Function]}
                getFilesInSlideshowDir={[Function]}
                updateSlideOrder={[Function]}
              />
            </div>
            <div
              className="adminFlexbox--Dropzone"
            >
              <UploadFiles
                activeFolder="bb1"
                getFilesInSlideshowDir={[Function]}
                uploadFile={[Function]}
                uploadStatus={true}
              />
            </div>
          </div>
        </div>,
      ],
      "className": "admin",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Admin Page",
        },
        "ref": null,
        "rendered": "Admin Page",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Logout",
          "className": "btn-logout",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Logout",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "style": Object {
            "marginBottom": "30px",
          },
        },
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>,
            Array [],
          ],
          "className": "selectActiveFolder",
          "name": "selectActiveFolder",
          "onChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Select a slideshow folder to edit",
              "value": "",
            },
            "ref": null,
            "rendered": "Select a slideshow folder to edit",
            "type": "option",
          },
        ],
        "type": "select",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value=""
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value={750}
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>,
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>,
          ],
          "className": "adminSection",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Connect(AdminWeather) />,
                "Slide duration (seconds):",
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value=""
                />,
                <br />,
                "Transition duration (ms):",
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value={750}
                />,
                " (1000ms = 1s)",
                <br />,
                <input
                  type="submit"
                  value="Save"
                />,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "Slide duration (seconds):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "slideDuration",
                  "onChange": [Function],
                  "placeholder": "Number (seconds)",
                  "type": "number",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              "Transition duration (ms):",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "transitionDuration",
                  "onChange": [Function],
                  "placeholder": "Number (milliseconds)",
                  "type": "number",
                  "value": 750,
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              " (1000ms = 1s)",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Save",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>,
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>,
              ],
              "className": "adminFlexbox",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />,
                  "className": "adminFlexbox--Slideshow",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "callUpdateConfigInDatabase": [Function],
                    "deleteFile": [Function],
                    "getConfigFromDatabase": [Function],
                    "getFilesInSlideshowDir": [Function],
                    "updateSlideOrder": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />,
                  "className": "adminFlexbox--Dropzone",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeFolder": "bb1",
                    "getFilesInSlideshowDir": [Function],
                    "uploadFile": [Function],
                    "uploadStatus": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Admin Page
          </h1>,
          <button
            className="btn-logout"
            onClick={[Function]}
          >
            Logout
          </button>,
          <hr
            style={
              Object {
                "marginBottom": "30px",
              }
            }
          />,
          <select
            className="selectActiveFolder"
            name="selectActiveFolder"
            onChange={[Function]}
          >
            <option
              value=""
            >
              Select a slideshow folder to edit
            </option>
          </select>,
          <div
            className="adminSection"
          >
            <form
              onSubmit={[Function]}
            >
              <Connect(AdminWeather) />
              Slide duration (seconds):
              <input
                id="slideDuration"
                onChange={[Function]}
                placeholder="Number (seconds)"
                type="number"
                value=""
              />
              <br />
              Transition duration (ms):
              <input
                id="transitionDuration"
                onChange={[Function]}
                placeholder="Number (milliseconds)"
                type="number"
                value={750}
              />
               (1000ms = 1s)
              <br />
              <input
                type="submit"
                value="Save"
              />
            </form>
            <div
              className="adminFlexbox"
            >
              <div
                className="adminFlexbox--Slideshow"
              >
                <Connect(AdminSlideshow)
                  activeFolder="bb1"
                  callUpdateConfigInDatabase={[Function]}
                  deleteFile={[Function]}
                  getConfigFromDatabase={[Function]}
                  getFilesInSlideshowDir={[Function]}
                  updateSlideOrder={[Function]}
                />
              </div>
              <div
                className="adminFlexbox--Dropzone"
              >
                <UploadFiles
                  activeFolder="bb1"
                  getFilesInSlideshowDir={[Function]}
                  uploadFile={[Function]}
                  uploadStatus={true}
                />
              </div>
            </div>
          </div>,
        ],
        "className": "admin",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Admin Page",
          },
          "ref": null,
          "rendered": "Admin Page",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Logout",
            "className": "btn-logout",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Logout",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "style": Object {
              "marginBottom": "30px",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value=""
              >
                Select a slideshow folder to edit
              </option>,
              Array [],
            ],
            "className": "selectActiveFolder",
            "name": "selectActiveFolder",
            "onChange": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select a slideshow folder to edit",
                "value": "",
              },
              "ref": null,
              "rendered": "Select a slideshow folder to edit",
              "type": "option",
            },
          ],
          "type": "select",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                onSubmit={[Function]}
              >
                <Connect(AdminWeather) />
                Slide duration (seconds):
                <input
                  id="slideDuration"
                  onChange={[Function]}
                  placeholder="Number (seconds)"
                  type="number"
                  value=""
                />
                <br />
                Transition duration (ms):
                <input
                  id="transitionDuration"
                  onChange={[Function]}
                  placeholder="Number (milliseconds)"
                  type="number"
                  value={750}
                />
                 (1000ms = 1s)
                <br />
                <input
                  type="submit"
                  value="Save"
                />
              </form>,
              <div
                className="adminFlexbox"
              >
                <div
                  className="adminFlexbox--Slideshow"
                >
                  <Connect(AdminSlideshow)
                    activeFolder="bb1"
                    callUpdateConfigInDatabase={[Function]}
                    deleteFile={[Function]}
                    getConfigFromDatabase={[Function]}
                    getFilesInSlideshowDir={[Function]}
                    updateSlideOrder={[Function]}
                  />
                </div>
                <div
                  className="adminFlexbox--Dropzone"
                >
                  <UploadFiles
                    activeFolder="bb1"
                    getFilesInSlideshowDir={[Function]}
                    uploadFile={[Function]}
                    uploadStatus={true}
                  />
                </div>
              </div>,
            ],
            "className": "adminSection",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Connect(AdminWeather) />,
                  "Slide duration (seconds):",
                  <input
                    id="slideDuration"
                    onChange={[Function]}
                    placeholder="Number (seconds)"
                    type="number"
                    value=""
                  />,
                  <br />,
                  "Transition duration (ms):",
                  <input
                    id="transitionDuration"
                    onChange={[Function]}
                    placeholder="Number (milliseconds)"
                    type="number"
                    value={750}
                  />,
                  " (1000ms = 1s)",
                  <br />,
                  <input
                    type="submit"
                    value="Save"
                  />,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "Slide duration (seconds):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "slideDuration",
                    "onChange": [Function],
                    "placeholder": "Number (seconds)",
                    "type": "number",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                "Transition duration (ms):",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "transitionDuration",
                    "onChange": [Function],
                    "placeholder": "Number (milliseconds)",
                    "type": "number",
                    "value": 750,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                " (1000ms = 1s)",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "type": "submit",
                    "value": "Save",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="adminFlexbox--Slideshow"
                  >
                    <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />
                  </div>,
                  <div
                    className="adminFlexbox--Dropzone"
                  >
                    <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />
                  </div>,
                ],
                "className": "adminFlexbox",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Connect(AdminSlideshow)
                      activeFolder="bb1"
                      callUpdateConfigInDatabase={[Function]}
                      deleteFile={[Function]}
                      getConfigFromDatabase={[Function]}
                      getFilesInSlideshowDir={[Function]}
                      updateSlideOrder={[Function]}
                    />,
                    "className": "adminFlexbox--Slideshow",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "callUpdateConfigInDatabase": [Function],
                      "deleteFile": [Function],
                      "getConfigFromDatabase": [Function],
                      "getFilesInSlideshowDir": [Function],
                      "updateSlideOrder": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <UploadFiles
                      activeFolder="bb1"
                      getFilesInSlideshowDir={[Function]}
                      uploadFile={[Function]}
                      uploadStatus={true}
                    />,
                    "className": "adminFlexbox--Dropzone",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "activeFolder": "bb1",
                      "getFilesInSlideshowDir": [Function],
                      "uploadFile": [Function],
                      "uploadStatus": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
